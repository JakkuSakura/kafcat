# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, macos]
        include:
        - build: linux
          os: ubuntu-18.04
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross

    - name: Build release binary
      run: cross build --release --target ${{ matrix.target }}

    - name: Build Archive
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: |
        outdir=kafcat-${{ matrix.target }}
        mkdir "$outdir"
        mv target/${{ matrix.target }}/release/kafcat "$outdir"
        mv README.md LICENSE "$outdir"
        strip "$outdir/kafcat"
        tar czf "$outdir.tar.gz" "$outdir"
        echo "ASSET=$outdir.tar.gz" >> $GITHUB_ENV

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.ASSET }}
